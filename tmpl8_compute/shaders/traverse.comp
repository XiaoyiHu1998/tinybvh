#version 430 core

layout (local_size_x = 32) in;

struct BVHNode
{
	vec4 lmin; // unsigned left in w
	vec4 lmax; // unsigned right in w
	vec4 rmin; // unsigned triCount in w
	vec4 rmax; // unsigned firstTri in w
};

layout (std430) buffer;

layout (binding = 0) readonly buffer I0 { BVHNode node[]; } nodeData;
layout (binding = 1) readonly buffer I1 { uint idx[]; } idxData;
layout (binding = 2) readonly buffer I2 { vec4 tri[]; } triData;
layout (binding = 3) writeonly buffer O { vec4 hit[]; } result;

vec4 traverse_ailalaine( const vec3 O, const vec3 D, const vec3 rD, const float tmax )
{
	// traverse BVH
	vec4 hit;
	hit.x = tmax;
	uint node = 0, stack[64], stackPtr = 0;
	while (true)
	{
		const BVHNode n = nodeData.node[node];
		const vec4 lmin = n.lmin, lmax = n.lmax;
		const vec4 rmin = n.rmin, rmax = n.rmax;
		const uint triCount = floatBitsToUint( rmin.w );
		if (triCount > 0)
		{
			const uint firstTri = floatBitsToUint( rmax.w );
			for (uint i = 0; i < triCount; i++)
			{
				const uint triIdx = idxData.idx[firstTri + i];
				const uint v0 = triIdx * 3;
				const vec4 edge1 = triData.tri[v0 + 1] - triData.tri[v0];
				const vec4 edge2 = triData.tri[v0 + 2] - triData.tri[v0];
				const vec3 h = cross( D, edge2.xyz );
				const float a = dot( edge1.xyz, h );
				if (abs( a ) < 0.0000001f) continue;
				const float f = 1 / a;
				const vec3 s = O - triData.tri[v0].xyz;
				const float u = f * dot( s, h );
				const vec3 q = cross( s, edge1.xyz );
				const float v = f * dot( D, q );
				if (u < 0 || v < 0 || u + v > 1) continue;
				const float d = f * dot( edge2.xyz, q );
				if (d > 0.0f && d < hit.x) hit = vec4( d, u, v, uintBitsToFloat( triIdx ) );
			}
			if (stackPtr == 0) break;
			node = stack[--stackPtr];
			continue;
		}
		uint left = floatBitsToUint( lmin.w ), right = floatBitsToUint( lmax.w );
		const vec3 t1a = (lmin.xyz - O) * rD, t2a = (lmax.xyz - O) * rD;
		const vec3 t1b = (rmin.xyz - O) * rD, t2b = (rmax.xyz - O) * rD;
		const vec3 minta = min( t1a, t2a ), maxta = max( t1a, t2a );
		const vec3 mintb = min( t1b, t2b ), maxtb = max( t1b, t2b );
		const float tmina = max( max( max( minta.x, minta.y ), minta.z ), 0 );
		const float tminb = max( max( max( mintb.x, mintb.y ), mintb.z ), 0 );
		const float tmaxa = min( min( min( maxta.x, maxta.y ), maxta.z ), hit.x );
		const float tmaxb = min( min( min( maxtb.x, maxtb.y ), maxtb.z ), hit.x );
		float dist1 = tmina > tmaxa ? 1e30f : tmina;
		float dist2 = tminb > tmaxb ? 1e30f : tminb;
		if (dist1 > dist2)
		{
			float h = dist1; dist1 = dist2; dist2 = h;
			uint t = left; left = right; right = t;
		}
		if (dist1 == 1e30f)
		{
			if (stackPtr == 0) break; else node = stack[--stackPtr];
		}
		else
		{
			node = left;
			if (dist2 != 1e30f) stack[stackPtr++] = right;
		}
	}
	return hit;
}

void main()
{
	uint id = gl_GlobalInvocationID.x;
	if (id >= 1280 * 720) return; // out of bounds

	// convert thread id into screen coordinates
	uint px = id % 1280, py = id / 1280;
	float u = float( px ) / 1280.0f, v = float( py ) / 720.0f;

	// construct primary ray
	const vec3 eye = vec3( 0.5, 0.5, -4 );
	const vec3 view = vec3( 0, 0, 1 );
	const vec3 C = eye + view;
	const vec3 p1 = C + vec3( -1.6f, 1, 0 );
	const vec3 p2 = C + vec3( 1.6f, 1, 0 );
	const vec3 p3 = C + vec3( -1.6f, -1, 0 );
	const vec3 P = p1 + u * (p2 - p1) + v * (p3 - p1);
	const vec3 D = normalize( P - eye );
	const vec3 rD = vec3( 1.0f / D.x, 1.0f / D.y, 1.0f / D.z );

	// trace
	vec4 hit = traverse_ailalaine( eye, D, rD, 1e30f );
	result.hit[id] = hit;
}